#!/usr/bin/env python
##########################################################################
#
# Copyright (c) 2013 Canonical Ltd.
# Copyright (c) 2013 Miing.org <samuel.miing@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the the GNU General Public License version 3, 
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
##########################################################################


import os
import re
import sys
import argparse
import requests
import tempfile

from config import settings
from utils.subproc import check_call, CalledProcessError
from utils.adb import AndroidBridge
from utils.downloads import DownloadManager


def _write_utouch_legal(path):
    '''Remember that the user accepted the license'''
    open(path, 'w').close()


def _query_utouch_legal(message):
    '''Display end user agreement to continue with deployment.'''
    try:
        while True:
            print message
            print 'Do you accept? [yes|no]'
            answer = raw_input().lower()
            if answer == 'yes':
                _write_utouch_legal(_utouch_legal_accepted_path())
                return True
            elif answer == 'no':
                return False
    except KeyboardInterrupt:
        settings.LOG.error('Interruption detected, cancelling install')
        return False


def _utouch_legal_has_accepted(path):
    '''Return True if the user accepted the license once'''
    return os.path.exists(path)


def _utouch_legal_accepted_path():
	'''Expand utouch legal path under the current user'''
	return os.path.expanduser(settings.UTOUCH_LEGAL_ACCEPTED_PATH)


def adb_errors(f):
    '''Decorating adb error management.'''
    def _adb_errors(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except CalledProcessError as e:
            settings.LOG.error('Error while executing %s' %
                               e.cmd)
            settings.LOG.info('Make sure the device is connected and viewable '
                              'by running \'adb devices\'')
            settings.LOG.info('Ensure you have a root device, one which running '
                              '\'adb root\' does not return an error')
            sys.exit(1)
    return _adb_errors


@adb_errors
def deploy_recovery_image(adb, files, recovery_file):
    ''''
    Deploys zip file list to the target device and reboots into recovery
    to install.
    '''
    for target in files.keys():
        adb.push(files[target], '/sdcard/')
    if recovery_file:
        adb.root()
        adb.push(recovery_file, '/cache/recovery/command')
    adb.reboot(recovery=True)
    settings.LOG.info('Once completed the device should reboot into Ubuntu')


@adb_errors
def create_recovery_file(adb, device_img, utouch_img):
    # Setup recovery rules
    recovery_file = tempfile.NamedTemporaryFile(delete=False)
    # Find out version
    current_version = adb.getprop('ro.modversion')
    if current_version.startswith('10.1'):
        settings.LOG.debug('Updating from JB')
        sdcard_path = '/sdcard/0'
    else:
        settings.LOG.info('Updating from ICS')
        sdcard_path = '/sdcard'
    recovery_script = settings.UTOUCH_RECOVERY_SCRIPT_TEMPLATE.format(
        sdcard_path,
        os.path.basename(device_img),
        os.path.basename(utouch_img))
    with recovery_file as output_file:
        output_file.write(recovery_script)
    settings.LOG.info('Setting up recovery rules')
    return recovery_file.name


@adb_errors
def bootstrap(adb, files):
    '''
    Deploys device file using fastboot and launches recovery for ubuntu
    deployment.
    '''
    adb.reboot(bootloader=True)
    settings.LOG.warning('The device needs to be unlocked for the following to work')

    recovery_file = ''
    for img in files.keys():
        part_re = re.compile('system|boot|recovery')
        match_obj = part_re.search(img)
        if match_obj:
            partition = match_obj.group()
            check_call('sudo fastboot flash %s %s' %
                (partition, files[img]), shell=True)
            if partition == 'recovery':
                recovery_file = files[img]
    if not recovery_file:
        settings.LOG.info('Successfully flashed, now rebooting device')
        check_call('sudo fastboot reboot', shell=True)
        return

    settings.LOG.info('Booting into recovery')
    check_call('sudo fastboot boot %s' % recovery_file, shell=True)
    settings.LOG.info('Once completed the device should reboot into Ubuntu')


@adb_errors
def push_for_autodeploy(adb, artifact):
    ''' Pushes artifact to devices sdcard'''
    if not artifact:
        return
    adb.push(artifact, '/sdcard/autodeploy.zip')


@adb_errors
def validate_device(adb):
    '''Validates if the image would be installable on the target'''
    df = adb.shell('df').split('\n')
    try:
        free_data = map(str.split,
                        filter(lambda s: s.startswith('/data '), df))[0][3]
    except IndexError:
        settings.LOG.error('Cannot find /data mountpoint')
        sys.exit(1)
    if free_data[-1:] == 'G' and float(free_data[:-1]) >= 4:
        LOG.info('Storage requirements in /data satisfied')
    else:
        LOG.error('Not enough space in /data, found %s', free_data)
        sys.exit(1)


@adb_errors
def detect_device(adb, device=None):
    '''If no argument passed determine them from the connected device.'''
    # Check CyanogenMod property
    if not device:
        device = adb.getprop('ro.cm.device').strip()
    # Check Android property
    if not device:
        device = adb.getprop('ro.product.device').strip()
    settings.LOG.info('Device detected as %s' % device)
    # property may not exist or we may not map it yet
    if device not in settings.UTOUCH_VALID_DEVICES:
        settings.LOG.error('Unsupported device, autodetect fails device')
        sys.exit(1)
    return device


def get_jenkins_build_id(uri):
    '''Downloads the jenkins build id from stamp file'''
    try:
        jenkins_build_stamp = requests.get(uri)
        if jenkins_build_stamp.status_code != 200:
            settings.LOG.error('Latest build detection not supported... bailing')
            sys.exit(1)
        # Make list and get rid of empties
        jenkins_build_data = filter(lambda x: x.startswith('JENKINS_BUILD='),
                                    jenkins_build_stamp.content.split('\n'))
        jenkins_build_id = jenkins_build_data[0].split('=')[1]
    except (requests.HTTPError, requests.Timeout, requests.ConnectionError):
        settings.LOG.error('Could not download build data from jenkins... bailing')
        sys.exit(1)
    except IndexError:
        settings.LOG.error('Jenkins data format has changed, incompatible')
        sys.exit(1)
    return jenkins_build_id


def setup_images_directory(build_number):
    '''Setup images directory for Ubuntu Touch
    
    Returns path to images directory
    '''
    curdir = os.path.abspath(os.path.dirname(__file__))
    images_dir = os.path.join(curdir, settings.UTOUCH_IMAGES_DIR)
    if not os.path.exists(images_dir):
    	settings.LOG.info('Creating images directory %s' % images_dir)
    	os.mkdir(images_dir)
    
    images_dir = os.path.join(images_dir, build_number)
    if not os.path.exists(images_dir):
        settings.LOG.info('Creating download directory %s' % images_dir)
        os.mkdir(images_dir)
    return images_dir


def accept_utouch_legal():
	'''Accept ubuntu touch legal'''
	if not _utouch_legal_has_accepted(_utouch_legal_accepted_path()) and \
       not _query_utouch_legal(settings.UTOUCH_LEGAL_NOTICE):
		sys.exit(1)


def import_alt_settings(alternate_settings):
    import imp
    global settings
    dirname, basename = os.path.split(args.alternate_settings)
    f, filename, desc = imp.find_module(basename.rstrip('\.py'), [dirname])
    settings = imp.load_module(basename.rstrip('\.py'), f, filename, desc)


def parse_arguments():
    '''Parses arguments passed in to script'''
    parser = argparse.ArgumentParser(
        description='''Phablet Flash Tool.
                       Grabs build from the network and deploys to device.
                       Does best effort to deploy in different ways.''')
    parser.add_argument('-d',
                        '--device',
                        help='''Target device to deploy.''',
                        required=False,
                        choices=settings.UTOUCH_VALID_DEVICES,
                       )
    parser.add_argument('-s',
                        '--serial',
                        help='''Device serial. Use when more than
                                one device is connected.''',
                       )
    parser.add_argument('--alternate-settings',
                        help='''Alternate default settings (not common)''',
                       )
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-b',
                       '--bootstrap',
                       help='''Bootstrap the target device, this only
                               works on Nexus devices or devices that
                               use fastboot and are unlocked.''',
                       action='store_true',
                      )
    group.add_argument('-D',
                       '--download-only',
                       help='''Download image only, but do not flash device.
                               Use -d to override target device autodetection
                               if target device is not connected.''',
                       action='store_true',
                      )
    parser.add_argument('-r',
                        '--revision',
                        required=False,
                        default=None,
                        help='Choose a specific build number to download.',
                       )
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-l',
                       '--latest',
                       action='store_const',
                       const=settings.UTOUCH_DAILY_URI,
                       required=False,
                       default=settings.UTOUCH_DAILY_URI,
                       dest='uri',
                       help='''Pulls the latest daily image.'''
                      )
    group.add_argument('-p',
                       '--base-path',
                       required=False,
                       default=None,
                       help='''Installs from base path, you must have the
                               same directory structure as if you downloaded
                               for real.
                               This option is completely offline.'''
                      )
    group.add_argument('-u',
                       '--uri',
                       required=False,
                       help='Alternate download uri',
                      )
    return parser.parse_args()


def main(args):
	# Try accepting the legal notice for Ubuntu Touch
	accept_utouch_legal()
	
	# Detect if target device is connected from host 
	if args.serial: 
		adb = AndroidBridge(args.serial) 
	else:
		adb = AndroidBridge()
	adb.start()
	device = detect_device(adb, args.device)
	
	# Setup images directory and download
	if not args.uri:
		args.uri = settings.UTOUCH_MWCDEMO_URI
	LOG.info('Download set to %s' % args.uri)
	if args.base_path:
		LOG.warning('Files to be flashed will be '
                    'taken from a previous download')
		download_dir = args.base_path
		offline = True
	else:
		offline = False
        if args.revision:
            images_dir = setup_images_directory(args.revision)
        else:
            jenkins_build_id = get_jenkins_build_id(
                               '%s/quantal-ubuntu_stamp' % args.uri)
            images_dir = setup_images_directory(jenkins_build_id)
	if args.bootstrap:
		images_list = [getattr(settings, 'UTOUCH_IMAGE', None)]
        for attr in ('UTOUCH_SYSTEM_IMG', 'UTOUCH_RECOVERY_IMG', 'UTOUCH_BOOT_IMG'):
            value = getattr(settings, attr, None)
            if value is not None:
                images_list.append(value % device)
	else:
		device_img = settings.UTOUCH_DEVICE_FILE % device
        images_list = [device_img, settings.UTOUCH_IMAGE]
	download_mgr = DownloadManager(args.uri, images_dir, images_list, offline)
	try:
		settings.LOG.info('Retrieving files')
		download_mgr.download()
	except KeyboardInterrupt:
		settings.LOG.info('To continue downloading in the future, rerun the same '
                 'command')
		sys.exit(1)
	except CalledProcessError:
		settings.LOG.error('Error while downloading, ensure connection')
		sys.exit(1)
	
	# Deploy artifact for UTouch to target device
	if not args.download_only:
		if settings.UTOUCH_VALIDATE_DEVICE:
			validate_device(adb)
        if args.bootstrap:
            push_for_autodeploy(adb,
                download_mgr.files.get(getattr(settings, 'UTOUCH_IMAGE', None)))
            bootstrap(adb, download_mgr.files)
        else:
            recovery_file = create_recovery_file(adb,
                download_mgr.files[device_img],
                download_mgr.files[settings.UTOUCH_IMAGE])
            deploy_recovery_image(adb, download_mgr.files, recovery_file)


if __name__ == "__main__":
    args = parse_arguments()
    if args.alternate_settings:
        settings.LOG.info('Alternate settings')
        import_alt_settings(args.alternate_settings)
    main(args)
