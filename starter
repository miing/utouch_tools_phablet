#!/usr/bin/env python
##########################################################################
#
# Copyright (c) 2013 Canonical Ltd.
# Copyright (c) 2013 Miing.org <samuel.miing@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the the GNU General Public License version 3, 
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
##########################################################################


import os
import sys
import argparse

from config import settings
from utils.subproc import check_call, check_output, CalledProcessError


def _validate_device(device):
	'''Check if target device is supported'''
	if device not in settings.UTOUCH_VALID_DEVICES: 
		settings.LOG.error('Target device [%s] not supported' % device)
		sys.exit(1)


def _sync_target_repository(repo, path):
	'''Syncs every target repository'''
	if not os.path.exists(path): 
		cmd = 'bzr branch %s %s' % (repo, path) 
		settings.LOG.info('Branching %s into %s' % (repo, path)) 
		check_call(cmd, shell=True)
	else: 
		settings.LOG.warning('Skipping %s, already synced' % path)


def _sync_ubuntu_android_repositories():
	'''Syncs ubuntu android-side sources'''
	settings.LOG.info('Syncing android-side ubuntu sources')
	
	if not os.path.exists(settings.UBUNTU_ANDROID_PATH): 
		os.mkdir(settings.UBUNTU_ANDROID_PATH) 
	for path in settings.UBUNTU_ANDROID_REPOS.keys():
		_sync_target_repository(settings.UBUNTU_ANDROID_REPOS[path], path)


def _install_base_dependencies(pkgs):
	"""Install base dependencies into host"""
	if pkgs:
		for pkg in pkgs:
			check_call(settings.IPKG % pkg, shell=True, executable='/bin/bash') 


def _check_base_dependencies():
    """Check base dependencies required for building"""
    if not settings.BASE_DEPENDENCIES:
		settings.LOG.error("Dependencies on Machine [%s], not supported yet" % 
				  settings.MACHINE_TYPE)
		sys.exit(1)
	
    required = []
    for pkg in settings.BASE_DEPENDENCIES:
        output = check_output(settings.LPKG % pkg, shell=True).strip()
        
        if output != '1':
            required.append(pkg)
    return required


def setup_target_device(device):
	'''Setup target device to build'''
	_validate_device(device)
	
	cmd = '. build/envsetup.sh'
	cmd += '; breakfast %s' % device
	settings.LOG.debug('Executing %s' % cmd)
	check_call(cmd, shell=True, executable='/bin/bash')


def sync_ubuntu_repositories():
	'''Syncs ubuntu sources'''
	_sync_ubuntu_android_repositories()


def sync_android_repositories(jobs='1', reference=None):
    '''Syncs android sources'''
    try:
        settings.LOG.info('Syncing android repositories')
        init_cmd = ['repo', 'init',
                    '-u', settings.CYANOGENMOD_REPO_INIT, 
                    '-b', settings.CYANOGENMOD_REPO_BRANCH
                    ]
        if reference:
            init_cmd += ['--reference', reference]
        check_call(init_cmd)
        check_call(['repo', 'sync', '-j%s' % jobs])
    except CalledProcessError:
        settings.LOG.error('Error while trying to sync repositories')
        sys.exit(1)


def setup_sync_dir(target_directory, continue_sync=False):
    '''Creates and changes to target directory'''
    if not continue_sync:
        try:
            if os.path.isfile(target_directory):
                raise OSError('%s is not a directory' %
                             target_directory)
            elif not os.path.isdir(target_directory):
                settings.LOG.debug('Creating sync directory %s' % target_directory)
                os.mkdir(target_directory)
            elif os.listdir(target_directory):
                raise OSError('%s is not empty and not using -c' %
                             target_directory)
        except OSError as e:
            if not e.message:
                settings.LOG.error('Cannot setup environment in %s' % 
                          target_directory)
            else:
                settings.LOG.error(e.message)
            sys.exit(1)
    settings.LOG.info('Changing to workdir %s' % target_directory)
    os.chdir(target_directory)


def install_base_dependencies():
	settings.LOG.info('Installing base dependencies')
	
	pkgs = _check_base_dependencies()
	if pkgs:
		_install_base_dependencies(pkgs)


def parse_arguments():
	'''Parses arguments passed in to script'''
	parser = argparse.ArgumentParser(
        description='Phablet Development Environment Setup Tool')
	parser.add_argument('-b',
                        '--base',
                        dest='base',
                        action='store_true',
                        help='''Install base dependencies''',
                        default=False,
                       )
	parser.add_argument('-j',
                        '--jobs',
                        type=int,
                        dest='jobs',
                        help='''Ammount of sync jobs''',
                        default='1',
                       ) 
	parser.add_argument('-c',
                        '--continue',
                        dest='continue_sync',
                        action='store_true',
                        help='''Continue a previously started sync''',
                        default=False,
                       )
	parser.add_argument('-r',
                        '--reference',
                        help='''Use another dev environment as reference for git''',
                        default='',
                       )
	parser.add_argument('-d',
                        '--device',
                        dest='device',
                        help='''Setup target device to build''',
                        action='store',
                        default=None
                       )
	parser.add_argument('target_directory',
                        help='Target directory for sources',
                       )
	return parser.parse_args()


def main(args):
	if args.base:
		install_base_dependencies()
	if args.target_directory:
		setup_sync_dir(os.path.abspath(os.path.expanduser(args.target_directory)),
			           args.continue_sync)
		sync_android_repositories(args.jobs, args.reference)
		sync_ubuntu_repositories()
		if args.vendors:
			setup_target_device(args.device)


if __name__ == "__main__":
    args = parse_arguments()
    main(args)
